---
title: 码农翻身
date: 2019-02-24 12:31:09 +0800
categories: 计算
tags: [程序设计, 职业素养]
gist: 
excerpt_separator: .. 摘要注释

---
.. container:: excerpt

    将多彩的糖衣（故事）剥除，就能品尝到作者馈赠给大家的饴糖（道理）。

.. 摘要注释

\ *事务*\ 所引入的\ *幂等性*\ ，可以理解成“一个没有副作用的纯函数调用”么？

通过给各个数据库增添“事件表”，将一个\ **横跨**\ 多个数据库的事务，\ **拆分**\ 成各个数据库的本地事务。使用\ *消息队列*\ 实现数据库间的事件推送，从而保证分布式存储的\ **可用性**\ 与\ **最终一致性**\ 。关于分布式存储的更多内容，可参见\ *松本行弘*\ 的文集——《\ `代码的未来`_\ 》。

\ *消息队列*\ 的“发布/订阅”机制，在《\ `程序员修炼之道`_\ 》的128页也有提及——通过事件的使用，将对象间的耦合减至最少。

面向切面编程（\ *AOP*\ ），不就是实现正交性设计么？\ *Java*\ 语言自身没办法将命名函数当作参数进行传递。因为程序员受到\ *Java*\ 语言特性的束缚，所以才衍生出\ *代理*\ 、\ *泛型*\ 。在总共23种设计模式之中，有16种在Lisp语言中\ `“本身就提供，或者被大大简化” <http://www.norvig.com/design-patterns/>`_\ 。

\ *单点登录*\ 、\ *授权码许可*\ 相似之处就是：网站将未登录用户重定向到一个\ *认证中心*\ ，该用户在\ *认证中心*\ 登录后，将携带认证标识重定向回原网站，原网站在后台向\ *认证中心*\ 发起校验。作者通过几张\ *UML*\ 顺序图，就将各参与对象间的交互过程表达出来了。

作者在数据库集群建设上提供了一些解决思路，但这个故事最终又引入了“集群如何编排、通信与管理”的问题，还得努力学习\ Swarms_\ 与\ Kubernetes_\ ，真是任重道远啊！

文摘
----

\ *TCP*\ 协议很复杂，不能要求每个程序员都去实现建立连接的三次握手、累积确认、分组缓存。这些应属于操作系统内核部分，操作系统通过抽象出一个\ *Socket*\ 概念，让上层应用去编程。在\ *Socket*\ 连接中，服务端的\ ``Accept``\ 与客户端的\ ``Connect``\ 一起完成了\ *TCP*\ 的三次握手，\ *Socket*\ 描述符指向了一个数据结构——\ *TCP/IP*\ 协议栈。

信号量，是个带有两个操作——\ ``wait``\ 和\ ``signal``\ ——的整数。\ ``wait``\ 和\ ``signal``\ 由操作系统内核实现，通过信号量可以解决生产者与消费者的同步问题。

约定重于配置

对于性格内向的程序员，很多时候你认为基本准备好了其实就够了。

精进
    * 好奇心
    * 养成计算机的思维方式
    * 扎实基础，融会贯通
    * 要透彻地理解一门技术的本质
    * 能写漂亮的代码
    * 抽象的能力
    * 技术领导力
    * 写作

.. _`代码的未来`: https://amzn.to/2TXjVAx
.. _`程序员修炼之道`: /bookshelf/程序员修炼之道/
.. _Swarms: https://docs.docker.com/get-started/part4/
.. _Kubernetes: https://kubernetes.io/
